import { redisClient } from '../config/redis.config';
import { UsersService } from '../users/users.service';
import { forwardRef, Inject, Injectable } from '@nestjs/common';
import { CustomErrorException } from '../errors/custom-error.exception';
import { PlayerErrorCodes } from '../errors/error-codes';
import { MMR_STEP } from './matchmaking.constants';
import { MatchmakingGateway } from './matchmaking.gateway';
import { MatchmakingSocketEvents } from './types/socket-events.enum';
import { MatchmakingRedisKeys } from './types/redis-keys.enum';

@Injectable()
export class MatchmakingService {
  constructor(
    private readonly usersService: UsersService,
    @Inject(forwardRef(() => MatchmakingGateway)) private readonly gateway: MatchmakingGateway
  ) {}

  async addPlayerToQueue(playerId: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const player = await this.usersService.findById(playerId);

      if (!player) {
        throw new CustomErrorException(PlayerErrorCodes.USER_NOT_FOUND, 'Player not found', 400);
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç MatchmakingPlayerData
      const playerData = {
        id: player.id,
        mmr: player.mmr,
        ping: player.ping,
        winRate: player.winRate,
        playStyle: player.playStyle,
        reports: player.reports,
        matchHistory: player.matchHistory,
      };

      console.log(playerData);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω MMR –ø–æ–ø–∞–¥–∞–µ—Ç –∏–≥—Ä–æ–∫
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ MMR = 1150, —Ç–æ –æ–Ω –ø–æ–ø–∞–¥—ë—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 1000‚Äì1199 (matchmaking:mmr:1000)
      const mmrRange = Math.floor(playerData.mmr / MMR_STEP) * MMR_STEP;
      const queueKey = `${MatchmakingRedisKeys.MATCHMAKING_MMR}${mmrRange}`;

      const isInQueue = await this.isPlayerInQueue(queueKey, playerId);

      if (isInQueue) {
        throw new CustomErrorException(PlayerErrorCodes.ALREADY_IN_QUEUE, 'Player is already in the matchmaking queue', 400);
      }

      await redisClient.zAdd(queueKey, { score: playerData.mmr, value: JSON.stringify(playerData) });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Redis ‚Üí —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥!
      await redisClient.publish(MatchmakingRedisKeys.MATCHMAKING_NEW_PLAYER, JSON.stringify(playerData));
    } catch (error) {
      console.error('Error adding player to queue:', error);
      throw error;
    }
  }

  async removePlayerFromQueue(playerId: string): Promise<void> {
    const queues = await redisClient.keys(`${MatchmakingRedisKeys.MATCHMAKING_MMR}*`); // –í—Å–µ –æ—á–µ—Ä–µ–¥–∏

    for (const queueKey of queues) {
      const players = await redisClient.zRange(queueKey, 0, -1);
      for (const playerData of players) {
        const player = JSON.parse(playerData);
        if (player.id === playerId) {
          await redisClient.zRem(queueKey, playerData);
          return;
        }
      }
    }
  }

  async isPlayerInQueue(queueKey: string, playerId: string): Promise<boolean> {
    const existingPlayers = await redisClient.zRange(queueKey, 0, -1);

    return existingPlayers.some((entry) => {
      const storedPlayer = JSON.parse(entry);
      return storedPlayer.id === playerId;
    });
  }

  async checkOfflinePlayers(player1: string, player2: string): Promise<string[]> {
    return new Promise((resolve) => {
      const playersConfirmed = new Set<string>();

      // –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ã –ø–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      const timeout = setTimeout(() => {
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –∏—Å—Ç–µ–∫–ª–∞`);

        const afkPlayers: string[] = [];

        if (!playersConfirmed.has(player1)) {
          afkPlayers.push(player1);
          console.log(`‚ùå –ò–≥—Ä–æ–∫ ${player1} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–∏–Ω–≥ (AFK)`);
        }
        if (!playersConfirmed.has(player2)) {
          afkPlayers.push(player2);
          console.log(`‚ùå –ò–≥—Ä–æ–∫ ${player2} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–∏–Ω–≥ (AFK)`);
        }

        resolve(afkPlayers); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ AFK-–∏–≥—Ä–æ–∫–æ–≤
      }, 5000);

      // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
      const confirmPlayer = (playerId: string) => {
        playersConfirmed.add(playerId);
        if (playersConfirmed.size === 2) {
          clearTimeout(timeout);
          resolve([]); // –û–±–∞ –∏–≥—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        }
      };

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ç–≤–µ—Ç—ã –æ—Ç –∏–≥—Ä–æ–∫–æ–≤
      // todo –ù–µ –æ—á–µ–Ω—å —á–∏—Ç–∞–µ–º–æ
      this.gateway.once(`${MatchmakingSocketEvents.PingResponsePlayer}${player1}`, () => confirmPlayer(player1));
      this.gateway.once(`${MatchmakingSocketEvents.PingResponsePlayer}${player2}`, () => confirmPlayer(player2));

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
      this.gateway.emitToPlayer(player1, MatchmakingSocketEvents.MatchPing);
      this.gateway.emitToPlayer(player2, MatchmakingSocketEvents.MatchPing);

      console.log(`üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω ping –∏–≥—Ä–æ–∫–∞–º ${player1} –∏ ${player2}`);
    });
  }

}