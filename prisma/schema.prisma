// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(uuid())
  username       String  @unique
  email          String  @unique
  password       String
  decks     Deck[]
  activeDeck   String?
  createdAt DateTime @default(now())
  mmr            Int     @default(1000) // Рейтинг игрока
  ping           Int     @default(50)   // Средний пинг
  winRate        Float   @default(50.0) // Винрейт %
  playStyle      String  @default("balanced") // Агрессивный, защитный, сбалансированный
  matchHistory   Json    @default("[]") // История матчей (JSON-массив)
  winTiming      Float   @default(0.0) // Среднее время побед
  loseTiming     Float   @default(0.0) // Среднее время поражений
  reports        Int     @default(0)   // Количество жалоб от других игроков

  // Связь с матчами
  matchesAsPlayer1 Match[] @relation("MatchPlayer1")
  matchesAsPlayer2 Match[] @relation("MatchPlayer2")
  matchesWon       Match[] @relation("MatchWinner")
}

model Admin {
  id        String  @id @default(uuid())
  username  String  @unique
  email     String  @unique
  password  String
  createdAt DateTime @default(now())
}

model Card {
  id        String  @id @default(uuid())
  name      String  @unique
  type      String  // "battle", "support", "event"
  rarity    String  // "common", "rare", "legendary"
  cost      Int     // Стоимость розыгрыша карты
  attack    Int
  defense   Int
  effect    String?
  createdAt DateTime @default(now())

  decks     DeckOnCard[]
}

model Deck {
  id        String  @id @default(uuid())
  name      String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  cards     DeckOnCard[]
  createdAt DateTime @default(now())
}

// промежуточная таблица для связи many-to-many
model DeckOnCard {
  deckId  String
  cardId  String
  deck    Deck  @relation(fields: [deckId], references: [id], onDelete: Cascade)
  card    Card  @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@id([deckId, cardId])
}

model Match {
  id           String   @id @default(uuid())
  player1      User     @relation("MatchPlayer1", fields: [player1Id], references: [id])
  player1Id    String
  player2      User     @relation("MatchPlayer2", fields: [player2Id], references: [id])
  player2Id    String
  rounds       Json     @default("[]")
  currentRound Int      @default(1)
  activePlayer String
  isFinished   Boolean  @default(false)
  winner       User?    @relation("MatchWinner", fields: [winnerId], references: [id])
  winnerId     String?

  player1Hand  Json     @default("[]") // Карты в руке первого игрока
  player2Hand  Json     @default("[]") // Карты в руке второго игрока
  player1AP    Int      @default(100)  // Очки действий первого игрока
  player2AP    Int      @default(100)  // Очки действий второго игрока

  createdAt    DateTime @default(now())
}
