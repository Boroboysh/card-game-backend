// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  username  String  @unique
  email     String  @unique
  password  String
  createdAt DateTime @default(now())
  decks     Deck[]
}

model Admin {
  id        String  @id @default(uuid())
  username  String  @unique
  email     String  @unique
  password  String
  createdAt DateTime @default(now())
}

model Card {
  id        String  @id @default(uuid())
  name      String  @unique
  type      String  // "battle", "support", "event"
  rarity    String  // "common", "rare", "legendary"
  cost      Int     // Стоимость розыгрыша карты
  attack    Int
  defense   Int
  effect    String?
  createdAt DateTime @default(now())

  decks     DeckOnCard[]
}

model Deck {
  id        String  @id @default(uuid())
  name      String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  cards     DeckOnCard[]
  createdAt DateTime @default(now())
}

// промежуточная таблица для связи many-to-many
model DeckOnCard {
  deckId  String
  cardId  String
  deck    Deck  @relation(fields: [deckId], references: [id], onDelete: Cascade)
  card    Card  @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@id([deckId, cardId])
}